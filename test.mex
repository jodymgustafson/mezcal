define rFactorial(n):
  if n < 0 then error "Invalid value" 
  if n == 0 then return 1
  return n * rFactorial(n - 1)

define factorial(n):
  if n < 0 then error "Invalid value" 
  let result = 1;
  while n > 1
    result = result * n
    n = n - 1
  wend
  return result

# Recursive fibonacci 
define rFibonacci(n):
  if n < 0 then error "Invalid value" 
  if n = 0 then return 0
  return n + rFibonacci(n - 1)

define fibonacci(n):
  if n < 0 then error "Invalid value" 
  let result = 0;
  while n > 0
    result = result + n
    n = n - 1
  wend
  return result

# Converts celsius to fahrenheit
define celsius2Fahr(c):
  return (c * 9) / 5 + 32

# Converts fahrenheit to celsius
define fahr2Celsius(f):
 return (f - 32) * 5 / 9

input "Convert from fahrenheit or celsius (f/c)", a
if a == "c" then
  input "Enter degrees celsius: ", c
  print c ," celsius is ", fahr2Celsius(c)
end
if a == "f" then
  input "Enter degrees fahrenheit: ", f
  print f ," fahrenheit is ", celsius2Fahr(f)
end


factorial
    put _n
    push 0          # [n, 0]
    blt :b1         # n < 0
    beq :b2         # n == 0
    pop             # [n]
    push 1          # [n, 1]
    sub             # n - 1
    call factorial
    push _n
    mul
:b1
    err "Invalid value"
:b2
    pop
    push 1
